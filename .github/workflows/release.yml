name: 'Release Pipeline'
run-name: '${{ github.workflow }} for ${{ github.ref_name }}'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ci-cd-build-and-test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       dotnet-version: [ '6.0.x' ]
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3  

  #   - name: Set Up .NET ${{ matrix.dotnet-version }}
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: ${{ matrix.dotnet-version }}
    
  #   - name: Configure Dependency Cache
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.nuget/packages
  #       # Look to see if there is a cache hit for the corresponding requirements file
  #       key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}
  #       restore-keys: |
  #         ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}

  #   - name: Restore ResultCs Dependencies
  #     run: dotnet restore ./src/ResultCs/ResultCs.csproj

  #   - name: Build ResultCs
  #     run: dotnet build ./src/ResultCs/ResultCs.csproj

  #   - name: Run ResultCs Unit Tests
  #     run: dotnet test /p:CollectCoverage=true /p:Threshold=80 /p:CoverletOutputFormat=lcov /p:CoverletOutput=./TestResults/lcov.info ./test/ResultCs.Tests.Unit/ResultCs.Tests.Unit.csproj

  #   - name: Create code coverage report
  #     run: |
  #       dotnet tool install -g dotnet-reportgenerator-globaltool
  #       reportgenerator -reports:${{ github.workspace }}/**/lcov.info -targetdir:${{ github.workspace }}/CodeCoverage -reporttypes:'MarkdownSummaryGithub'

  #   - name: Write Line Coverage Badge to Job Summary
  #     run: echo '![Line Code Coverage]('$(${{ github.workspace }}/.github/workflows/badge-url.sh Line ${{ github.workspace }}/CodeCoverage/SummaryGithub.md)')' >> $GITHUB_STEP_SUMMARY

  #   - name: Write Branch Coverage Badge to Job Summary
  #     run: echo '![Branch Code Coverage]('$(${{ github.workspace }}/.github/workflows/badge-url.sh Branch ${{ github.workspace }}/CodeCoverage/SummaryGithub.md)')' >> $GITHUB_STEP_SUMMARY

  #   - name: Write Coverage Summary to Job Summary
  #     run: cat ${{ github.workspace }}/CodeCoverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

  release-nuget-package:
    runs-on: ubuntu-latest
    # needs: [ 'ci-cd-build-and-test' ]
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
    steps:

    - name: Add SSH key
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.AUTOMATION_PRIVATE_KEY }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null	
          ssh-add /home/runner/.ssh/github_actions
    
    - name: Configure GitHub
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          git config --global user.email "milo.wical@gmail.com"
          git config --global user.name "J.A.R.V.I.S. [GitHub Actions]"
    
    - name: Checkout
      uses: actions/checkout@v3  

    - name: Set Up .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Configure Dependency Cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}

    - name: Build NuGet package
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ${{ github.workspace }}/.github/workflows/create-nuget-package.sh \
          '${{ github.repository }}' '${{ github.ref_name }}' \
          --project '${{ github.workspace }}/src/ResultCs/ResultCs.csproj' \
          --sym \
          --configuration Release \
          --output '${{ github.workspace }}/pkg' \
          --name 'WicalWare.ResultCs' \
          --url 'https://github.com/${{ github.repository }}' \
          --force-version-update \
          --suffix rc

    # - name: Create RC Release
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     ${{ github.workspace }}/.github/workflows/create-github-release.sh \
    #     '${{ github.repository }}' '${{ github.ref_name }}' \
    #     --prerelease \
    #     --force-version-update \
    #     --suffix rc \
    #     '${{ github.workspace }}/pkg/*'

    - name: Push RC Package to GitHub
      run: |
        dotnet nuget add source \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text \
          --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

    #     dotnet nuget push \
    #       '${{ github.workspace }}/pkg/*.nupkg' \
    #       --source github

    #     dotnet nuget push \
    #       '${{ github.workspace }}/pkg/*.snupkg' \
    #       --source github

    - name: Test Integration Tests with RC Package
      run: |
        dotnet restore ${{ github.workspace }}/test/ResultCs.Tests.Integration/ResultCs.Tests.Integration.csproj \
          --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

        dotnet test ${{ github.workspace }}/test/ResultCs.Tests.Integration/ResultCs.Tests.Integration.csproj

    - name: Reversion Package
      run: |
        NUGET_PACKAGE=$(ls ${{ github.workspace }}/pkg/*.nupkg | head -n1)
        ${{ github.workspace }}/.github/workflows/update-nuget-version.sh "$NUGET_PACKAGE" --remove-suffix --sym

    # - name: Create Release
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     ${{ github.workspace }}/.github/workflows/create-github-release.sh \
    #     '${{ github.repository }}' '${{ github.ref_name }}' \
    #     '${{ github.workspace }}/pkg/*'

    # - name: Push Release Package to GitHub
    #   run: |
    #     dotnet nuget push \
    #       '${{ github.workspace }}/pkg/*.nupkg' \
    #       --source github

    #     dotnet nuget push \
    #       '${{ github.workspace }}/pkg/*.snupkg' \
    #       --source github

    # - name: Push Release Package to NuGet
    #   run: |
    #     dotnet nuget list source

    # - name: Generate Docs
    #   run: |
    #     echo "Calling Docs"