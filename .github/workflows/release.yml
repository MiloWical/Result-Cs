name: 'Release Pipeline'
run-name: '${{ github.workflow }} for ${{ github.ref_name }}'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: write
  contents: write
  packages: write
  pages: write


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-cd-build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3  

    - name: Set Up .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Configure Dependency Cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}

    - name: Restore ResultCs Dependencies
      run: dotnet restore ./src/ResultCs/ResultCs.csproj

    - name: Build ResultCs
      run: dotnet build ./src/ResultCs/ResultCs.csproj

    - name: Run ResultCs Unit Tests
      run: dotnet test /p:CollectCoverage=true /p:Threshold=80 /p:CoverletOutputFormat=lcov /p:CoverletOutput=./TestResults/lcov.info ./test/ResultCs.Tests.Unit/ResultCs.Tests.Unit.csproj

    - name: Create code coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:${{ github.workspace }}/**/lcov.info -targetdir:${{ github.workspace }}/CodeCoverage -reporttypes:'MarkdownSummaryGithub'

    - name: Write Line Coverage Badge to Job Summary
      run: echo '![Line Code Coverage]('$(${{ github.workspace }}/.github/workflows/badge-url.sh Line ${{ github.workspace }}/CodeCoverage/SummaryGithub.md)')' >> $GITHUB_STEP_SUMMARY

    - name: Write Branch Coverage Badge to Job Summary
      run: echo '![Branch Code Coverage]('$(${{ github.workspace }}/.github/workflows/badge-url.sh Branch ${{ github.workspace }}/CodeCoverage/SummaryGithub.md)')' >> $GITHUB_STEP_SUMMARY

    - name: Write Coverage Summary to Job Summary
      run: cat ${{ github.workspace }}/CodeCoverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

  build-and-test-nuget-package:
    environment: nuget-preview
    runs-on: ubuntu-latest
    needs: [ 'ci-cd-build-and-test' ]
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
    steps:

    - name: Add SSH key
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          mkdir -p /home/runner/.ssh
          echo "${{ secrets.AUTOMATION_PRIVATE_KEY }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null	
          ssh-add /home/runner/.ssh/github_actions
    
    - name: Configure GitHub
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          git config --global user.email "milo.wical@gmail.com"
          git config --global user.name "J.A.R.V.I.S. [GitHub Actions]"
    
    - name: Checkout
      uses: actions/checkout@v3  

    - name: Set Up .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Configure Dependency Cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}
        restore-keys: |
          ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}

    - name: Build NuGet package
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ${{ github.workspace }}/.github/workflows/create-nuget-package.sh \
          '${{ github.repository }}' '${{ github.ref_name }}' \
          --project '${{ github.workspace }}/src/ResultCs/ResultCs.csproj' \
          --sym \
          --configuration Release \
          --output '${{ github.workspace }}/pkg' \
          --name 'WicalWare.ResultCs' \
          --url 'https://milowical.github.io/Result-Cs/' \
          --force-version-update \
          --suffix rc

    - name: Create RC Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ${{ github.workspace }}/.github/workflows/create-github-release.sh \
        '${{ github.repository }}' '${{ github.ref_name }}' \
        --prerelease \
        --force-version-update \
        --suffix rc \
        '${{ github.workspace }}/pkg/*'

    - name: Add GitHub NuGet Source
      run: |
        dotnet nuget add source \
          'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json' \
          --username ${{ github.actor }} \
          --password '${{ secrets.GITHUB_TOKEN }}' \
          --store-password-in-clear-text \
          --name github

    - name: Push RC Package to GitHub
      run: |
        dotnet nuget push \
          '${{ github.workspace }}/pkg/*.nupkg' \
          --api-key '${{ secrets.GITHUB_TOKEN }}' \
          --source github

        dotnet nuget push \
          '${{ github.workspace }}/pkg/*.snupkg' \
          --api-key '${{ secrets.GITHUB_TOKEN }}' \
          --source github

    - name: Run Integration Tests with RC Package
      run: |
        dotnet restore ${{ github.workspace }}/test/ResultCs.Tests.Integration/ResultCs.Tests.Integration.csproj \
          --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

        dotnet test ${{ github.workspace }}/test/ResultCs.Tests.Integration/ResultCs.Tests.Integration.csproj

    - name: Push RC Package to NuGet
      run: |
        dotnet nuget push \
          '${{ github.workspace }}/pkg/*.nupkg' \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source 'https://api.nuget.org/v3/index.json'

    - name: Upload Package Artifact
      uses: actions/upload-artifact@v3
      with:
        name: nuget-rc-package
        path: ${{ github.workspace }}/pkg/

  release-nuget-package:
    environment: nuget
    runs-on: ubuntu-latest
    needs: [ 'build-and-test-nuget-package' ]
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Package Artifact
        uses: actions/download-artifact@v3
        with:
          name: nuget-rc-package
          path: ${{ github.workspace }}/pkg/
    
      - name: Reversion Package
        run: |
          NUGET_PACKAGE=$(ls ${{ github.workspace }}/pkg/*.nupkg | head -n1)
          ${{ github.workspace }}/.github/workflows/update-nuget-version.sh "$NUGET_PACKAGE" --remove-suffix --sym
          ls ${{ github.workspace }}/pkg/

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ${{ github.workspace }}/.github/workflows/create-github-release.sh \
          '${{ github.repository }}' '${{ github.ref_name }}' \
          '${{ github.workspace }}/pkg/*'

      - name: Add GitHub NuGet Source
        run: |
          dotnet nuget add source \
            'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json' \
            --username ${{ github.actor }} \
            --password '${{ secrets.GITHUB_TOKEN }}' \
            --store-password-in-clear-text \
            --name github

      - name: Push Release Package to GitHub
        run: |
          dotnet nuget push \
            '${{ github.workspace }}/pkg/*.nupkg' \
            --api-key '${{ secrets.GITHUB_TOKEN }}' \
            --source github

          dotnet nuget push \
            '${{ github.workspace }}/pkg/*.snupkg' \
            --api-key '${{ secrets.GITHUB_TOKEN }}' \
            --source github

      - name: Push Release Package to NuGet
        run: |
          dotnet nuget push \
            '${{ github.workspace }}/pkg/*.nupkg' \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source 'https://api.nuget.org/v3/index.json'

  generate-docs:
    needs: [ 'release-nuget-package' ]
    uses: ./.github/workflows/docs.yml